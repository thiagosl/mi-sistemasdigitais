module reg_flags (inpA, inpB, inpC, control, data, outA, outB, outC);

	input [3:0] inpA;
	input [3:0] inpB;
	input [3:0] inpC;
	input [1:0] control;
	input [31:0] data;
	output reg [31:0] outA;
	output reg [31:0] outB;
	output reg [31:0] outC;
	reg [31:0] reg1;
	reg [31:0] reg2;
	reg [31:0] reg3;
	reg [31:0] reg4;
	reg [31:0] reg5;
	reg [31:0] reg6;
	reg [31:0] reg7;
	reg [31:0] reg8;
	reg [31:0] reg9;
	reg [31:0] reg10;
	reg [31:0] reg11;
	reg [31:0] reg12;
	reg [31:0] reg13;
	reg [31:0] reg14;
	reg [31:0] reg15;
	reg [31:0] reg16;
	
	always @(inp or control) begin
		if (control) begin
			out = inp;
		end
	end

endmodule


module reg_flags_tb;

	reg [6:0] inp;
	reg control;
	wire [6:0] out;

	reg_flags DUT(inp, control, out);

	initial begin
		control = 1;
		inp = 6'b010101;
		#20;
		inp = 6'b111111;
		#20;
		control = 0;
		inp = 6'b000000;
		#20;
		inp = 6'b101010;
		#20;
		$finish;
	end

endmodule
